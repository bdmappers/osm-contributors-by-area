L.Control.Sidebar=L.Control.extend({includes:L.Mixin.Events,options:{closeButton:!0,position:"left",autoPan:!0},initialize:function(a,b){L.setOptions(this,b);var c=this._contentContainer=L.DomUtil.get(a);c.parentNode.removeChild(c);var d="leaflet-",e=this._container=L.DomUtil.create("div",d+"sidebar "+this.options.position);if(L.DomUtil.addClass(c,d+"control"),e.appendChild(c),this.options.closeButton){var f=this._closeButton=L.DomUtil.create("a","close",e);f.innerHTML="&times;"}},addTo:function(a){var b=this._container,c=this._contentContainer;if(this.options.closeButton){var d=this._closeButton;L.DomEvent.on(d,"click",this.hide,this)}L.DomEvent.on(b,"transitionend",this._handleTransitionEvent,this).on(b,"webkitTransitionEnd",this._handleTransitionEvent,this);var e=a._controlContainer;e.insertBefore(b,e.firstChild),this._map=a;var f=L.DomEvent.stopPropagation;return L.DomEvent.on(c,"click",f).on(c,"mousedown",f).on(c,"touchstart",f).on(c,"dblclick",f).on(c,"mousewheel",f).on(c,"MozMousePixelScroll",f),this},removeFrom:function(a){this.hide();var b=this._contentContainer,c=a._controlContainer;c.removeChild(this._container),this._map=null;var d=L.DomEvent.stopPropagation;if(L.DomEvent.off(b,"click",d).off(b,"mousedown",d).off(b,"touchstart",d).off(b,"dblclick",d).off(b,"mousewheel",d).off(b,"MozMousePixelScroll",d),L.DomEvent.off(container,"transitionend",this._handleTransitionEvent,this).off(container,"webkitTransitionEnd",this._handleTransitionEvent,this),this._closeButton&&this._close){var e=this._closeButton;L.DomEvent.off(e,"click",this.hide,this)}return this},isVisible:function(){return L.DomUtil.hasClass(this._container,"visible")},show:function(){this.isVisible()||(L.DomUtil.addClass(this._container,"visible"),this.options.autoPan&&this._map.panBy([-this.getOffset()/2,0],{duration:.5}),this.fire("show"))},hide:function(a){this.isVisible()&&(L.DomUtil.removeClass(this._container,"visible"),this.options.autoPan&&this._map.panBy([this.getOffset()/2,0],{duration:.5}),this.fire("hide")),a&&L.DomEvent.stopPropagation(a)},toggle:function(){this.isVisible()?this.hide():this.show()},getContainer:function(){return this._contentContainer},getCloseButton:function(){return this._closeButton},setContent:function(a){return this.getContainer().innerHTML=a,this},getOffset:function(){return"right"===this.options.position?-this._container.offsetWidth:this._container.offsetWidth},_handleTransitionEvent:function(a){("left"==a.propertyName||"right"==a.propertyName)&&this.fire(this.isVisible()?"shown":"hidden")}}),L.control.sidebar=function(a,b){return new L.Control.Sidebar(a,b)};;
(function(){L.Control.ListMarkers=L.Control.extend({includes:L.Mixin.Events,options:{layer:!1,maxItems:20,collapsed:!1,label:"title",itemIcon:L.Icon.Default.imagePath+"/marker-icon.png",itemArrow:"&#10148;",maxZoom:9,position:"bottomleft"},initialize:function(a){L.Util.setOptions(this,a),this._container=null,this._list=null,this._layer=this.options.layer||new L.LayerGroup},onAdd:function(a){this._map=a;var b=this._container=L.DomUtil.create("div","list-markers");return this._list=L.DomUtil.create("ul","list-markers-ul",b),this._initToggle(),a.on("moveend",this._updateList,this),this._updateList(),b},onRemove:function(a){a.off("moveend",this._updateList,this),this._container=null,this._list=null},_createItem:function(a){var b=L.DomUtil.create("li","list-markers-li"),c=L.DomUtil.create("a","",b),d=this.options.itemIcon?'<img src="'+this.options.itemIcon+'" />':"",e=this;return c.href="#",L.DomEvent.disableClickPropagation(c).on(c,"click",L.DomEvent.stop,this).on(c,"click",function(){this._moveTo(a.getLatLng())},this).on(c,"mouseover",function(){e.fire("item-mouseover",{layer:a})},this).on(c,"mouseout",function(){e.fire("item-mouseout",{layer:a})},this),a.options.hasOwnProperty(this.options.label)?c.innerHTML=d+"<span>"+a.options[this.options.label]+"</span> <b>"+this.options.itemArrow+"</b>":console.log("propertyName '"+this.options.label+"' not found in marker"),b},_updateList:function(){var a=this,b=0;this._list.innerHTML="",this._layer.eachLayer(function(c){c instanceof L.Marker&&a._map.getBounds().contains(c.getLatLng())&&++b<a.options.maxItems&&a._list.appendChild(a._createItem(c))})},_initToggle:function(){var a=this._container;if(a.setAttribute("aria-haspopup",!0),L.Browser.touch?L.DomEvent.on(a,"click",L.DomEvent.stopPropagation):L.DomEvent.disableClickPropagation(a),this.options.collapsed){this._collapse(),L.Browser.android||L.DomEvent.on(a,"mouseover",this._expand,this).on(a,"mouseout",this._collapse,this);var b=this._button=L.DomUtil.create("a","list-markers-toggle",a);b.href="#",b.title="List Markers",L.Browser.touch?L.DomEvent.on(b,"click",L.DomEvent.stop).on(b,"click",this._expand,this):L.DomEvent.on(b,"focus",this._expand,this),this._map.on("click",this._collapse,this)}},_expand:function(){this._container.className=this._container.className.replace(" list-markers-collapsed","")},_collapse:function(){L.DomUtil.addClass(this._container,"list-markers-collapsed")},_moveTo:function(a){this.options.maxZoom?this._map.setView(a,Math.min(this._map.getZoom(),this.options.maxZoom)):this._map.panTo(a)}}),L.control.listMarkers=function(a){return new L.Control.ListMarkers(a)},L.Map.addInitHook(function(){this.options.listMarkersControl&&(this.listMarkersControl=L.control.listMarkers(this.options.listMarkersControl),this.addControl(this.listMarkersControl))})}).call(this);;
(function() {

L.LayerJSON = L.FeatureGroup.extend({

	includes: L.Mixin.Events,
	//
	//Managed Events:
	//	Event			Data passed		 Description
	//  dataloading		{req: url|bbox}	 fired before ajax/jsonp request, req is bbox if url option is null
	//	dataloaded		{data: json}	 fired on ajax/jsonp request success
	//
	options: {
		url: '',					//url map: "search.php?lat1={lat1}&lat2={lat2}&lon1={lon1}&lon2={lon2}"
		jsonpParam: null,			//parameter name for jsonp requests
		callData: null,				//custom function for data source, params: (req: url|bbox, callback: func), return {abort: func}
		filterData: null,			//function that filter marker by its data, run before onEachMarker
		//
		propertyItems: '', 			//json property used contains data items
		propertyTitle: 'title', 	//json property used as title(popup, marker, icon)
		propertyLoc: 'loc', 		//json property used as Latlng of marker use array for select double fields(ex. ['lat','lon'] )
		//							// support dotted format: 'prop.subprop.title'
		layerTarget: null,			//pre-existing layer to add markers, is a LayerGroup or L.MarkerClusterGroup http://goo.gl/tvmu0
		dataToMarker: null,			//function that will be used for creating markers from json points, similar to pointToLayer of L.GeoJSON
		onEachMarker: null,			//function called on each marker created, similar to option onEachFeature of L.GeoJSON
		buildPopup: null,			//function popup builder
		optsPopup: null,			//popup options
		buildIcon: null,			//function icon builder
		//
		minZoom: 10,				//min zoom for call data
		caching: true,				//enable requests caching
		minShift: 1000,				//min shift for update data(in meters)
		updateOutBounds: true,		//request new data only if current bounds higher than last bounds
		precision: 6,				//number of digit send to server for lat,lng precision
		attribution: ''				//attribution text
		//TODO option: enabled, if false 
		//TODO methods: enable()/disable()
		//TODO send map bounds decremented of certain margin		
	},

	initialize: function(options) {			
		L.FeatureGroup.prototype.initialize.call(this, []);
		L.Util.setOptions(this, options);
		this._dataToMarker = this.options.dataToMarker || this._defaultDataToMarker;
		this._buildIcon = this.options.buildIcon || this._defaultBuildIcon;
		this._filterData = this.options.filterData || null;
		this._hashUrl = this.options.url;
		
		if(this._hashUrl)
		{
			this._callData = this.getAjax;
			if(this.options.jsonpParam)
			{
				this._hashUrl += '&'+this.options.jsonpParam+'=';
				this._callData = this.getJsonp;
			}
		}
		else
			this._callData = this.options.callData;

		this._curReq = null;
		this._center = null;
		this._maxBounds = null;
		this._markersCache = {};	//used for caching _dataToMarker builds		
	},

	onAdd: function(map) { //console.info('onAdd');
		
		L.FeatureGroup.prototype.onAdd.call(this, map);		//set this._map
		this._center = map.getCenter();
		this._maxBounds = map.getBounds();

		map.on('moveend', this._onMove, this);
			
		this.update();
	},
    
	onRemove: function(map) { //console.info('onRemove');
		
		map.off('moveend', this._onMove, this); //FIXME not work!
		
		L.FeatureGroup.prototype.onRemove.call(this, map);	

		for (var i in this._layers) {
			if (this._layers.hasOwnProperty(i)) {
				L.FeatureGroup.prototype.removeLayer.call(this, this._layers[i]);
			}
		}
	},

	getAttribution: function() {
		return this.options.attribution;
	},

	addLayer: function (layer) {
		if(this.options.layerTarget)
		{
			this.options.layerTarget.addLayer.call(this.options.layerTarget, layer);
			return this.fire('layeradd', {layer: layer});
		}
		else
			L.FeatureGroup.prototype.addLayer.call(this, layer);
		return this;
	},
	
	removeLayer: function (layer) {
		if(this.options.layerTarget)
		{
			this.options.layerTarget.removeLayer.call(this.options.layerTarget, layer);
			return this.fire('layerremove', {layer: layer});
		}
		else
			L.FeatureGroup.prototype.removeLayer.call(this, layer);
		return this;
	},
	
	clearLayers: function () {
		
		this._markersCache = {};	//cached gen markers

		if(this.options.layerTarget)
			this.options.layerTarget.clearLayers.call(this.options.layerTarget);
		else
			L.FeatureGroup.prototype.clearLayers.call(this);
		return this;
	},

	_getPath: function(obj, prop) {
		var parts = prop.split('.'),
			last = parts.pop(),
			len = parts.length,
			cur = parts[0],
			i = 1;

		if(len > 0)
			while((obj = obj[cur]) && i < len)
				cur = parts[i++];

		if(obj)
			return obj[last];
	},

	_defaultBuildIcon: function(data, title) {
		return new L.Icon.Default();
	},
	
	_defaultDataToMarker: function(data, latlng) {	//make marker from data

		var title = this._getPath(data, this.options.propertyTitle),
			markerOpts = L.Util.extend({icon: this._buildIcon(data,title), title: title }, data),
			marker = new L.Marker(latlng, markerOpts ),
			htmlPopup = null;
		
		if(this.options.buildPopup && (htmlPopup = this.options.buildPopup(data, marker)))
			marker.bindPopup(htmlPopup, this.options.optsPopup );
		
		return marker;
	},
	
	addMarker: function(data) {

		var latlng, hash, propLoc = this.options.propertyLoc;

		if( L.Util.isArray(propLoc) )
			latlng = L.latLng( parseFloat(data[propLoc[0]]), parseFloat(data[propLoc[1]]) );
		else
			latlng = L.latLng( this._getPath(data, propLoc) );

		hash = [latlng.lat,latlng.lng].join() + this._getPath(data, this.options.propertyTitle);

		if(!this._markersCache[hash])
			this._markersCache[hash] = this._dataToMarker(data, latlng);

		if(this.options.onEachMarker)//maybe useless
			this.options.onEachMarker(data, this._markersCache[hash]);

		this.addLayer( this._markersCache[hash] );
	},

	_markersCacheToLayer: function(bounds) {	//show cached markers to layer
		for(var i in this._markersCache)
			if( bounds.contains(this._markersCache[i].getLatLng()) )
				this.addLayer(this._markersCache[i]);
			else
				this.removeLayer(this._markersCache[i]);
	},

	_onMove: function(e) {
		var newZoom = this._map.getZoom(),
			newCenter = this._map.getCenter(),
			newBounds = this._map.getBounds();		

		if(newZoom < this.options.minZoom)
			return false;

		if(this.options.caching) {

			if( this.options.minShift && this._center.distanceTo(newCenter) < this.options.minShift )
				return false;
			else
				this._center = newCenter;

			if( this.options.updateOutBounds && this._maxBounds.contains(newBounds) )//bounds not incremented
			{
				this._markersCacheToLayer(newBounds);
				//TODO maybe execute this ever
				return false;
			}
			else
				this._maxBounds.extend(newBounds);
		}
		else
		 	this.clearLayers();

		this.update();
	},
	
	update: function() {	//populate target layer

		var prec = this.options.precision,
			bb = this._map.getBounds(),
			sw = bb.getSouthWest(),
			ne = bb.getNorthEast(),
			bbox = [
				[ parseFloat(sw.lat.toFixed(prec)), parseFloat(sw.lng.toFixed(prec)) ],
				[ parseFloat(ne.lat.toFixed(prec)), parseFloat(ne.lng.toFixed(prec)) ]
			];

		if(this._hashUrl)							//conver bbox to url string
			bbox = L.Util.template(this._hashUrl, {
					lat1: bbox[0][0], lon1: bbox[0][1],
					lat2: bbox[1][0], lon2: bbox[1][1]
				});

		if(this._curReq && this._curReq.abort)
			this._curReq.abort();		//prevent parallel requests

		var that = this;
		that.fire('dataloading', {req: bbox });	
		this._curReq = this._callData(bbox, function(json) {

			that._curReq = null;

			if(that._filterData)
				json = that._filterData(json);
			
			if(that.options.propertyItems)
				json = that._getPath(json, that.options.propertyItems);

			that.fire('dataloaded', {data: json});
			
			for(var k in json)
				that.addMarker.call(that, json[k]);
		});
	},


/////////////////ajax jsonp methods

	getAjax: function(url, cb) {	//default ajax request

console.log(url);
	
		if (window.XMLHttpRequest === undefined) {
			window.XMLHttpRequest = function() {
				try {
					return new ActiveXObject("Microsoft.XMLHTTP.6.0");
				}
				catch  (e1) {
					try {
						return new ActiveXObject("Microsoft.XMLHTTP.3.0");
					}
					catch (e2) {
						throw new Error("XMLHttpRequest is not supported");
					}
				}
			};
		}
		var request = new XMLHttpRequest();
		request.open('GET', url);
		request.onreadystatechange = function() {
			var response = {};
		    if (request.readyState === 4 && request.status === 200) {
		    	try {
					if(window.JSON) {
				        response = JSON.parse(request.responseText);
					} else {
						response = eval("("+ request.responseText + ")");
					}
		    	} catch(err) {
		    		console.info(err);
		    		response = {};
		    	}
		        cb(response);
		    }
		};
		request.send();
		return request;   
	},
	
	getJsonp: function(url, cb) {  //extract searched records from remote jsonp service
		var body = document.getElementsByTagName('body')[0],
			script = L.DomUtil.create('script','layerjson-jsonp', body );
		
		L.LayerJSON.callJsonp = function(data) {	//jsonp callback
			//TODO data = filterJSON.apply(that,[data]);
			cb(data);
			body.removeChild(script);
		}
		script.type = 'text/javascript';
		script.src = url+'L.LayerJSON.callJsonp';
		return {abort: function() { script.parentNode.removeChild(script); } };
	}
});

L.layerJSON = function (options) {
    return new L.LayerJSON(options);
};

}).call(this);

;
//facebook
(function(d, s, id) {
var js, fjs = d.getElementsByTagName(s)[0];
if (d.getElementById(id)) return;
js = d.createElement(s); js.id = id;
js.src = "//connect.facebook.net/it_IT/sdk.js#xfbml=1&appId=455565641219872&version=v2.0";
fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));
//google+1
(function() {
var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
po.src = 'https://apis.google.com/js/plusone.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
})();
//twitter
!function(d,s,id){
var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}
}(document, 'script', 'twitter-wjs');;
$(function(){var a=15,b=new L.Map("map",{attribution:'<a href="http://leafletjs.com/">Leaflet</a> &bull; <a href="http://osm.org/" target="_blank">OpenStreetMap contributors</a>',layers:L.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"),minZoom:a}),c="http://overpass-api.de/api/interpreter?";b.setView(L.latLng(42.4461,12.4937),a),L.layerJSON({url:c+"data=[out:json];node({lat1},{lon1},{lat2},{lon2});out meta;",propertyItems:"elements",propertyTitle:"tags.name",propertyLoc:["lat","lon"],dataToMarker:function(){return L.marker([0,0])}}).on("dataloading",function(a){console.log("dataloading",a)}).on("dataloaded",function(a){console.log("dataloaded",a)}).addTo(b)});